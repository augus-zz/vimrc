set expandtab       " expand tab to space
set tabstop=2       " tab width
set softtabstop=2   " backspace
set shiftwidth=2    " indent width"
" set colorcolumn=300
set noautoindent
set nosmartindent
set nocindent

" enable syntax hightlight and completion
syntax on

let &titlestring = @%
set title

" highlight current line
" set cursorline

" encoding dectection
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1

" show line numbers
" set number
set nobackup
set backspace=2

" theme
color molokai
colorscheme molokai

if &term =~ "xterm.*"
  let &t_ti = &t_ti . "\e[?2004h"
  let &t_te = "\e[?2004l" . &t_te
  function XTermPasteBegin(ret)
  set pastetoggle=<Esc>[201~
  set paste
  return a:ret
  endfunction
  map <expr> <Esc>[200~ XTermPasteBegin("i")
  imap <expr> <Esc>[200~ XTermPasteBegin("")
  cmap <Esc>[200~ <nop>
  cmap <Esc>[201~ <nop>
endif

" nerd tree
let NERDTreeWinPos = "left"
let NERDTreeWinSize=18
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$',  '\~$']
let NERDTreeShowBookmarks=1

" indent guides
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" tabbar
let g:Tb_MaxSize = 2
let g:Tb_TabWrap = 1
let g:tagbar_left=1
let g:tagbar_width=30
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_compact = 1
hi Tb_Normal guifg=white ctermfg=white
hi Tb_Changed guifg=green ctermfg=green
hi Tb_VisibleNormal ctermbg=252 ctermfg=235
hi Tb_VisibleChanged guifg=green ctermbg=252 ctermfg=white

" easy-motion
let g:EasyMotion_leader_key = '<Leader>'

" nerdcommenter
let NERDSpaceDelims=1
" nmap <D-/> :NERDComToggleComment<cr>
let NERDCompactSexyComs=1

" ctrlp
set wildignore+=*/tmp/*,*.so,*.o,*.a,*.obj,*.swp,*.zip,*.pyc,*.pyo,*.class,.DS_Store,tags  " MacOSX/Linux
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'

" Keybindings for plugin toggle
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
nmap <F5> :TagbarToggle<cr>
nmap <F6> :NERDTreeToggle<cr>
" nmap <F3> :GundoToggle<cr>
nmap <F4> :IndentGuidesToggle<cr>
nmap  <D-/> :
nnoremap <leader>a :Ack
nnoremap <leader>v V`]

" w!! to sudo & write a file
cmap w!! %!sudo tee >/dev/null %

" search
set incsearch
set hlsearch
set ignorecase
set smartcase
set showmatch
"set highlight 	" conflict with highlight current line
highlight Search ctermbg=yellow ctermfg=black
highlight IncSearch ctermbg=black ctermfg=yellow
highlight MatchParen cterm=underline ctermbg=NONE ctermfg=NONE
" 当光标一段时间保持不动了，就禁用高亮
autocmd cursorhold * set nohlsearch
" 当输入查找命令时，再启用高亮
noremap n :set hlsearch<cr>n
noremap N :set hlsearch<cr>N
noremap / :set hlsearch<cr>/
noremap ? :set hlsearch<cr>?
noremap # :set hlsearch<cr>*
noremap * :set hlsearch<cr>#

" easygrep
let g:EasyGrepMode = 0     " All:0, Open Buffers:1, TrackExt:2
let g:EasyGrepCommand = 1  " Use vimgrep:0, grepprg:1
let g:EasyGrepRecursive  = 1 " Recursive searching
let g:EasyGrepIgnoreCase = 1 " not ignorecase:0
let g:EasyGrepFilesToExclude = "*.bak,cscope.*,*.a,*.o,*.pyc,*.tmp,*.swp,*.swo,*.tag,*.tags,spec,bin,build"

" airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 0
" let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_theme='bubblegum'
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n' : 'N',
      \ 'i' : 'I',
      \ 'R' : 'R',
      \ 'c' : 'C',
      \ 'v' : 'V',
      \ 'V' : 'V',
      \ '^V' : 'V',
      \ 's' : 'S',
      \ 'S' : 'S',
      \ '^S' : 'S',
      \ }

" buffer switch
nnoremap <C-b> :bn<CR>
nnoremap <S-B> :bp<CR>

" ctrl+c back to cmd mode and save file
nnoremap <C-c> <esc><CR>
" nnoremap <C-c> <esc>:w<CR><CR>
nmap <C-s> :w<CR>
imap <C-s> <Esc>:w<CR>

" " youcommpleteme
" highlight Pmenu ctermfg=15 ctermbg=0 guifg=#eeeeee guibg=#111111
" " youcompleteme
" let g:ycm_min_num_of_chars_for_completion = 2
" let g:ycm_auto_trigger = 1
" let g:ycm_echo_current_diagnostic = 1
" let g:ycm_complete_in_strings = 1
" let g:ycm_collect_identifiers_from_comments_and_strings = 0
" let g:ycm_collect_identifiers_from_tags_files = 0
" let g:ycm_add_preview_to_completeopt = 0
" let g:ycm_autoclose_preview_window_after_completion = 0
" let g:ycm_autoclose_preview_window_after_insertion = 0
" let g:ycm_key_list_select_completion = ['<TAB>', '<C-n>', '<Enter>']
" let g:ycm_key_list_previous_completion = ['<S-TAB>', '<C-p>']
" let g:ycm_disable_for_files_larger_than_kb = 512
" let g:ycm_keep_logfiles = 0
" set completeopt=longest,menu	"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
" autocmd InsertLeave * if pumvisible() == 0|pclose|endif	"离开插入模式后自动关闭预览窗口
" inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"	"回车即选中当前项
" " 上下左右键的行为 会显示其他信息
" inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
" inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
" inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
" inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
"
" " youcompleteme  默认tab  s-tab 和自动补全冲突
" let g:ycm_key_list_select_completion=['<c-n>']
" " let g:ycm_key_list_select_completion = ['<Down>']
" let g:ycm_key_list_previous_completion=['<c-p>']
" " let g:ycm_key_list_previous_completion = ['<Up>']
" let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
" " let g:ycm_collect_identifiers_from_tags_files=1	" 开启 YCM 基于标签引擎
" let g:ycm_cache_omnifunc=0	" 禁止缓存匹配项,每次都重新生成匹配项
" let g:ycm_seed_identifiers_with_syntax=1	" 语法关键字补全
" " nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>	"force recomile with syntastic
" " nnoremap <leader>lo :lopen<CR>	"open locationlist
" " nnoremap <leader>lc :lclose<CR>	"close locationlist
" " inoremap <leader><leader> <C-x><C-o>
" nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> " 跳转到定义处
"
" let g:ycm_semantic_triggers =  {
"   \   'c' : ['->', '.'],
"   \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
"   \             're!\[.*\]\s'],
"   \   'ocaml' : ['.', '#'],
"   \   'cpp,objcpp' : ['->', '.', '::'],
"   \   'perl' : ['->'],
"   \   'php' : ['->', '::'],
"   \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
"   \   'ruby' : ['.', '::'],
"   \   'lua' : ['.', ':'],
"   \   'erlang' : [':'],
"   \ }

" ctags
set tags=tags;
" set autochdir

" easytags
let g:easytags_cmd = '/usr/local/bin/ctags'
let g:easytags_file = '/tmp/.tags'
let g:easytags_dynamic_files = 2
let g:easytags_async = 1
let g:easytags_include_members = 1
let g:easytags_autorecurse = 0
let g:easytags_updatetime_min = 120000

" cscope setting
" if has("cscope")
"   set csprg=/usr/local/bin/cscope
"   set csto=1
"   set cst
"   set nocsverb
"   " add any database in current directory
"   if filereadable("cscope.out")
"     cs add cscope.out
"     " else add database pointed to by environment
"   elseif $CSCOPE_DB != ""
"     cs add $CSCOPE_DB
"   endif
"   set csverb
" endif
"
" nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
" nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
" nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
